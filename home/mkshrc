# vim:ft=sh
# ~/.mkshrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

HISTFILE=~/.mksh_history

bind '^L=clear-screen'
bind -m ^U='^[0^K'
bind -m ^Q='^A^[[1;5C^[[C'

[ -r ~/.shellsrc ] && . ~/.shellsrc

PS1func() {
	local title time user path branch njobs n m item
	time="36| $(PStime)"
	user="35| $USER"
	path="32| $(sed -E 's/([^\./]{1})[^/]*\//\1\//g' <<< ${PWD/#$HOME/\~})"
	branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
	if [ "$branch" ]; then
		branch=" $branch"
		m=$(git rev-parse --show-toplevel)
		n=$(git ls-files -o --exclude-standard "$m" | wc -l)
		if [ $n -gt 0 ]; then
			branch=",${n}u$branch"
		fi
		n=$(git ls-files -d "$m" | wc -l)
		if [ $n -gt 0 ]; then
			branch=",${n}d$branch"
		fi
		n=$(git ls-files -m "$m" | wc -l)
		if [ $n -gt 0 ]; then
			branch=",${n}m$branch"
		fi
		n=$(git diff --staged --name-only | wc -l)
		if [ $n -gt 0 ]; then
			branch=",${n}s$branch"
		fi
		n="$(git rev-list --left-right --count master...origin/master 2>/dev/null)"
		m="${n#*	}"; n="${n%	*}"
		if [ "$n" ] && [ "$m" ]; then
			if [ $n -ne 0 ] || [ $m -ne 0 ]; then
				branch=",$n/$m$branch"
			fi
		fi
		branch="${branch#,}"
		branch=" (${branch# })"
	fi
	branch="37|$branch"
	njobs=" [$(jobs -p | wc -l)]"
	njobs="37|${njobs# \[0\]}"
	# hyphen -, en dash –, em dash —
	title="${PWD/#$HOME/\~} : ${0##*/} — ${TERM%-*color}"

	echo -en "\\001\\015"
	echo -en "\\001\\033]0;"; echo -n "$title"; echo -en "\\007\\001"
	for item in "$time" "$user" "$path" "$branch" "$njobs"; do
		echo -en "\\001\\033[${item%%\|*}m\\001"
		echo -n "${item#*\|}"
	done
	printf "\\001\\033[00m\\001 "
}

PROMPT_COMMAND=""
PS1="\$(PS1func)"
